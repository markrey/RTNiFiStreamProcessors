From 22f7a77ce8a2432b5ed87fc2ec83087b32ff82d2 Mon Sep 17 00:00:00 2001
From: richards-tech <info@richards-tech.com>
Date: Wed, 20 Jan 2016 11:38:54 -0500
Subject: [PATCH] append mode PutFile

---
 .../java/org/apache/nifi/processors/standard/PutFile.java  | 14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

diff --git a/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutFile.java b/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutFile.java
index d32427e..a27d231 100644
--- a/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutFile.java
+++ b/nifi-nar-bundles/nifi-standard-bundle/nifi-standard-processors/src/main/java/org/apache/nifi/processors/standard/PutFile.java
@@ -22,6 +22,7 @@ import java.nio.file.Paths;
 import java.nio.file.attribute.PosixFileAttributeView;
 import java.nio.file.attribute.PosixFilePermissions;
 import java.nio.file.attribute.UserPrincipalLookupService;
+import java.nio.file.StandardOpenOption;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -33,7 +34,10 @@ import java.util.Locale;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
+import java.io.InputStream;
+import java.io.IOException;
 
+import org.apache.commons.io.IOUtils;
 import org.apache.nifi.annotation.behavior.InputRequirement;
 import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
 import org.apache.nifi.annotation.behavior.SupportsBatching;
@@ -51,6 +55,7 @@ import org.apache.nifi.processor.ProcessorInitializationContext;
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.processor.io.InputStreamCallback;
 import org.apache.nifi.util.StopWatch;
 
 @SupportsBatching
@@ -63,6 +68,7 @@ public class PutFile extends AbstractProcessor {
     public static final String REPLACE_RESOLUTION = "replace";
     public static final String IGNORE_RESOLUTION = "ignore";
     public static final String FAIL_RESOLUTION = "fail";
+	public static final String APPEND_RESOLUTION = "append";
 
     public static final String FILE_MODIFY_DATE_ATTRIBUTE = "file.lastModifiedTime";
     public static final String FILE_MODIFY_DATE_ATTR_FORMAT = "yyyy-MM-dd'T'HH:mm:ssZ";
@@ -85,7 +91,7 @@ public class PutFile extends AbstractProcessor {
             .description("Indicates what should happen when a file with the same name already exists in the output directory")
             .required(true)
             .defaultValue(FAIL_RESOLUTION)
-            .allowableValues(REPLACE_RESOLUTION, IGNORE_RESOLUTION, FAIL_RESOLUTION)
+            .allowableValues(REPLACE_RESOLUTION, IGNORE_RESOLUTION, FAIL_RESOLUTION, APPEND_RESOLUTION)
             .build();
     public static final PropertyDescriptor CHANGE_LAST_MODIFIED_TIME = new PropertyDescriptor.Builder()
             .name("Last Modified Time")
@@ -219,7 +225,6 @@ public class PutFile extends AbstractProcessor {
                     return;
                 }
             }
-
             if (Files.exists(finalCopyFile)) {
                 switch (conflictResponse) {
                     case REPLACE_RESOLUTION:
@@ -235,6 +240,11 @@ public class PutFile extends AbstractProcessor {
                         logger.info("Penalizing {} and routing to failure as configured because file with the same name already exists", new Object[]{flowFile});
                         session.transfer(flowFile, REL_FAILURE);
                         return;
+					case APPEND_RESOLUTION:
+                        session.exportTo(flowFile, finalCopyFile, true);
+                        session.transfer(flowFile, REL_SUCCESS);
+                        return;
+                        
                     default:
                         break;
                 }
-- 
1.9.1

